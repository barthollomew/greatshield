name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Security Checks
  lint-and-security:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Run security audit
      run: npm audit --audit-level moderate

    - name: Check for outdated dependencies
      run: npm outdated || true

    - name: TypeScript type checking
      run: npx tsc --noEmit

  # Comprehensive Testing Suite
  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: lint-and-security
    
    strategy:
      matrix:
        test-suite: [unit, integration, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ${{ matrix.test-suite }} tests
      run: |
        if [ "${{ matrix.test-suite }}" = "unit" ]; then
          npm test -- --testPathPattern="tests/unit" --coverage
        elif [ "${{ matrix.test-suite }}" = "integration" ]; then
          npm test -- --testPathPattern="tests/integration"
        elif [ "${{ matrix.test-suite }}" = "security" ]; then
          npm test -- --testPathPattern="tests/security"
        fi

    - name: Upload coverage reports
      if: matrix.test-suite == 'unit'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # Build and Package
  build:
    name: Build & Package
    runs-on: ${{ matrix.os }}
    needs: [lint-and-security, test]
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Package application
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          npm run package:linux
        elif [ "${{ matrix.os }}" = "windows-latest" ]; then
          npm run package:win
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          npm run package:mac
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: greatshield-${{ matrix.os }}
        path: dist/
        retention-days: 30

  # Website Build and Deploy
  website:
    name: Website Build & Deploy
    runs-on: ubuntu-latest
    needs: lint-and-security
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: website/package-lock.json

    - name: Install website dependencies
      working-directory: ./website
      run: npm ci

    - name: Build website
      working-directory: ./website
      run: npm run build

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./website/dist

  # Docker Image Build and Push
  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'release'
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  # Performance Testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run performance tests
      run: npm test -- --testPathPattern="tests/performance" --verbose

    - name: Generate performance report
      run: |
        echo "Performance test results:" > performance-report.txt
        echo "Memory usage, response times, and throughput metrics" >> performance-report.txt

    - name: Upload performance report
      uses: actions/upload-artifact@v4
      with:
        name: performance-report
        path: performance-report.txt

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run CodeQL analysis
      uses: github/codeql-action/analyze@v2
      with:
        languages: javascript

  # Release Management
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, test, docker, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate changelog
      run: |
        echo "# Changelog" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## Latest Changes" >> CHANGELOG.md
        git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0)..HEAD >> CHANGELOG.md

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        tag: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        bodyFile: CHANGELOG.md
        artifacts: "./artifacts/**/*"
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}

  # Post-deployment Health Check
  health-check:
    name: Post-deployment Health Check
    runs-on: ubuntu-latest
    needs: [release]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Wait for deployment
      run: sleep 60

    - name: Check website health
      run: |
        curl -f -s -o /dev/null -w "%{http_code}" https://greatshield-bot.github.io || exit 1

    - name: Verify download links
      run: |
        echo "Verifying release artifacts are accessible..."
        # Add specific health checks for your deployment

    - name: Notify team
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: "Deployment health check failed for Greatshield bot!"

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [release, health-check]
    if: always()
    
    steps:
    - name: Delete old artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const artifacts = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          
          const oldArtifacts = artifacts.data.artifacts.filter(artifact => {
            const ageInDays = (new Date() - new Date(artifact.created_at)) / (1000 * 60 * 60 * 24);
            return ageInDays > 30;
          });
          
          for (const artifact of oldArtifacts) {
            await github.rest.actions.deleteArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: artifact.id,
            });
          }